// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace nunit.integration.tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("NUnit should support TeamCity in NUnitlite")]
    public partial class NUnitShouldSupportTeamCityInNUnitliteFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "TeamCityForNUnitlite.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "NUnit should support TeamCity in NUnitlite", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
 testRunner.Given("NUnit path is ..\\nunit\\", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("NUnitlite sends TeamCity\'s service messages when I run successful test")]
        [NUnit.Framework.CategoryAttribute("teamcity")]
        [NUnit.Framework.TestCaseAttribute("Version45", "CmdArguments", null)]
        [NUnit.Framework.TestCaseAttribute("Version40", "CmdArguments", null)]
        [NUnit.Framework.TestCaseAttribute("Version45", "EnvVariable", null)]
        [NUnit.Framework.TestCaseAttribute("Version40", "EnvVariable", null)]
        public virtual void NUnitliteSendsTeamCitysServiceMessagesWhenIRunSuccessfulTest(string frameworkVersion, string teamCityIntegration, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "teamcity"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("NUnitlite sends TeamCity\'s service messages when I run successful test", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
this.FeatureBackground();
#line 8
 testRunner.Given(string.Format("Framework version is {0}", frameworkVersion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("I have added NUnitLiteEntryPoint method as Main to the class Foo.Tests.Program fo" +
                    "r foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I have added successful method as SuccessfulTest to the class Foo.Tests.UnitTests" +
                    "1 for foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("I have created the folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("I have added NUnit framework references to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("I have added the reference mocks\\nunitlite.dll to foo.tests", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("I have copied NUnit framework references to folder mocks", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("I have compiled the assembly foo.tests to file mocks\\foo.tests.exe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
 testRunner.And(string.Format("I want to use {0} type of TeamCity integration", teamCityIntegration), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.When("I run mocks\\foo.tests.exe", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
 testRunner.Then("the exit code should be 0", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "name",
                        "captureStandardOutput",
                        "duration",
                        "flowId",
                        "parent",
                        "message",
                        "details",
                        "out",
                        "tc:tags"});
            table60.AddRow(new string[] {
                        "testSuiteStarted",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table60.AddRow(new string[] {
                        "flowStarted",
                        "",
                        "",
                        "",
                        ".+",
                        ".+",
                        "",
                        "",
                        "",
                        ""});
            table60.AddRow(new string[] {
                        "testStarted",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "false",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table60.AddRow(new string[] {
                        "testStdOut",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "output",
                        "tc:parseServiceMessagesInside"});
            table60.AddRow(new string[] {
                        "testFinished",
                        "Foo.Tests.UnitTests1.SuccessfulTest",
                        "",
                        "\\d+",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table60.AddRow(new string[] {
                        "flowFinished",
                        "",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table60.AddRow(new string[] {
                        "testSuiteFinished",
                        "foo.tests.dll",
                        "",
                        "",
                        ".+",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 19
 testRunner.And("the output should contain TeamCity service messages:", ((string)(null)), table60, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
